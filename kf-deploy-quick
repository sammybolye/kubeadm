
#Create a GKE cluster
export PROJECT_ID=`gcloud config get-value project` &&   export M_TYPE=n1-standard-2 &&   export ZONE=us-central1-b &&   export CLUSTER_NAME=${PROJECT_ID}-${RANDOM} &&   gcloud services enable container.googleapis.com &&   gcloud container clusters create $CLUSTER_NAME   --cluster-version $1   --machine-type=$M_TYPE   --num-nodes 4   --zone $ZONE   --project $PROJECT_ID

#List all the images in all pods ( to get the baseline)
kubectl get pods -A -o=custom-columns='DATA:spec.containers[*].image'| sort |uniq > /tmp/before-$2.list

#Download the kubeflow manifests from the official repo
wget https://github.com/kubeflow/manifests/archive/refs/heads/v$2-branch.zip

#unzip the manifests
unzip v$2-branch.zip

cd manifests-$2-branch/

#Deploy kubeflow using kustomize
while ! kustomize build example | kubectl apply -f -; do echo "Retrying to apply resources"; sleep 10; done

#List all the Images 
kubectl get pods -A -o=custom-columns='DATA:spec.containers[*].image' |sort |uniq > /tmp/after-$2.list

#Build the delta  list with just the kubeflow images
diff /tmp/before-$2.list /tmp/after-$2.list | cut -d' ' -f2 > /tmp/delta-$2.list

# Create self signed certs and  TLS secrets so that the central dashboard doesn't complain about ssl handshake when browsing through different artefacts
openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -subj '/O=example Inc./CN=example.com' -keyout example.com.key -out example.com.crt
openssl req -out httpbin.example.com.csr -newkey rsa:2048 -nodes -keyout tls.key -subj "/CN=httpbin.example.com/O=httpbin organization"
openssl x509 -req -days 365 -CA example.com.crt -CAkey example.com.key -set_serial 0 -in httpbin.example.com.csr -out tls.crt

kubectl create secret generic istio-ingressgateway-certs --from-file=tls.key=tls.key --from-file=tls.crt=tls.crt -n istio-system

# Expose the istio ingress gateway as an external load balancer
kubectl patch svc istio-ingressgateway -n istio-system -p '{"metadata":{"annotations":{"beta.cloud.google.com/backend-config":"{\"ports\": {\"http2\":\"iap-backendconfig\"}}"}}}'

kubectl patch svc istio-ingressgateway -n istio-system -p '{"spec": {"type": "LoadBalancer"}}'

# Patch the istio ingress gateway to terminate ssl
kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: kubeflow-gateway
  namespace: kubeflow
spec:
  selector:
    istio: ingressgateway
  servers:
  - hosts:
    - '*'
    port:
      name: https
      number: 443
      protocol: HTTPS
    tls:
      mode: SIMPLE
      privateKey: /etc/istio/ingressgateway-certs/tls.key
      serverCertificate: /etc/istio/ingressgateway-certs/tls.crt
EOF

#Wait for the Load Balancer IP to be avaialable 
watch kubectl get svc -n istio-system
